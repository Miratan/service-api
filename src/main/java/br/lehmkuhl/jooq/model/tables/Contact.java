/**
 * This class is generated by jOOQ
 */
package br.lehmkuhl.jooq.model.tables;


import br.lehmkuhl.jooq.model.Keys;
import br.lehmkuhl.jooq.model.Servicofloripa;
import br.lehmkuhl.jooq.model.tables.records.ContactRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Contact extends TableImpl<ContactRecord> {

    private static final long serialVersionUID = 1409808541;

    /**
     * The reference instance of <code>servicofloripa.contact</code>
     */
    public static final Contact CONTACT = new Contact();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ContactRecord> getRecordType() {
        return ContactRecord.class;
    }

    /**
     * The column <code>servicofloripa.contact.id</code>.
     */
    public final TableField<ContactRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>servicofloripa.contact.phone</code>.
     */
    public final TableField<ContactRecord, String> PHONE = createField("phone", org.jooq.impl.SQLDataType.VARCHAR.length(15).nullable(false), this, "");

    /**
     * The column <code>servicofloripa.contact.whatsapp</code>.
     */
    public final TableField<ContactRecord, Byte> WHATSAPP = createField("whatsapp", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * Create a <code>servicofloripa.contact</code> table reference
     */
    public Contact() {
        this("contact", null);
    }

    /**
     * Create an aliased <code>servicofloripa.contact</code> table reference
     */
    public Contact(String alias) {
        this(alias, CONTACT);
    }

    private Contact(String alias, Table<ContactRecord> aliased) {
        this(alias, aliased, null);
    }

    private Contact(String alias, Table<ContactRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Servicofloripa.SERVICOFLORIPA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ContactRecord, Long> getIdentity() {
        return Keys.IDENTITY_CONTACT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ContactRecord> getPrimaryKey() {
        return Keys.KEY_CONTACT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ContactRecord>> getKeys() {
        return Arrays.<UniqueKey<ContactRecord>>asList(Keys.KEY_CONTACT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Contact as(String alias) {
        return new Contact(alias, this);
    }

    /**
     * Rename this table
     */
    public Contact rename(String name) {
        return new Contact(name, null);
    }
}
